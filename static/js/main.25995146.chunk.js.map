{"version":3,"sources":["radar/components/WaitingForRadar.module.scss","radar/components/BackButton.tsx","ui/ChakraUI.tsx","components/navbar/components/MenuItem.tsx","navigation/routes.ts","components/navbar/MenuLinks.tsx","components/navbar/components/Logo.tsx","assets/logos/UNDP_logo.png","components/navbar/components/UNLogo.tsx","components/navbar/components/MenuIcon.tsx","components/navbar/components/CloseIcon.tsx","components/navbar/MenuToggle.tsx","assets/logos/SDG_BLACK_logo.png","assets/logos/SDG_WHITE_logo.png","components/navbar/components/UNDPLogo.tsx","components/navbar/NavBarContainer.tsx","components/navbar/AppNavbar.tsx","components/drawers/filter/FilterUtilities.tsx","components/drawers/filter/FilterConstants.ts","components/drawers/filter/CustomFilter.tsx","components/drawers/FilterDrawer.tsx","components/drawers/tech/components/ScrollableDiv.tsx","components/drawers/tech/components/TechItem.tsx","components/drawers/tech/TechList.tsx","components/drawers/TechDrawer.tsx","ui/MainLayout.tsx","pages/about/AboutOrganization.tsx","pages/about/AboutContent.ts","pages/about/About.tsx","components/lists/components/ScrollableDiv.tsx","components/lists/quadrant/DataLists.tsx","radar/components/WaitingForRadar.tsx","pages/views/QuadrantView.tsx","components/constants/app.ts","radar/tech/TechDescription.tsx","pages/views/RadarView.tsx","pages/Radar.tsx","pages/Search.tsx","pages/NotFound404.tsx","navigation/AppNav.tsx","assets/csv/technology_radar_dataset_updated_v3.csv","radar/RadarProvider.tsx","components/views/blip/BlipView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","BackTo","ChakraUI","children","breakpoints","createBreakpoints","sm","md","lg","xl","initialColorMode","theme","config","extendTheme","colors","useSystemColorMode","MenuItem","to","RADAR","QUADRANT","QUADRANT_PARAM","BLIP","ROUTES","ABOUT","SEARCH","BLIP_PARAM","MenuLinks","isOpen","display","base","flexBasis","paddingTop","spacing","align","justify","direction","pt","size","rounded","colorScheme","color","Logo","props","useState","loading","setLoading","useEffect","timeoutId","setTimeout","clearTimeout","m","file","maxwidthorheight","toString","img","src","maxW","maxH","fontSize","fontWeight","UNLogo","logo","MenuIcon","colorMode","useColorMode","width","viewBox","xmlns","fill","d","CloseIcon","MenuToggle","toggle","onClick","pl","UNDPLogo","w","logoBlack","logoWhite","paddingLeft","NavBarContainer","as","wrap","position","height","background","pb","pr","AppNavbar","React","setIsOpen","h","p","FilterUtils","rawBlipData","countryKey","newCountries","Map","forEach","val","has","set","uuid","uuidv4","name","Array","from","values","disasterTypeKey","newDisterTypes","useCaseKey","newUseCases","implementerKey","newImplementers","SDGKey","newSDGs","blip","sdg","startYearKey","newStartYears","endYearKey","newEndYears","CustomFilter","useRadarState","state","blips","disasterTypeFilter","useCaseFilter","setUseCaseFilter","setDisasterTypeFilter","setFilteredBlips","useDataState","keys","disasterKey","countryFilter","setCountryFilter","implementerFilter","setImplementerFilter","sdgFilter","setSdgFilter","startYearFilter","setStartYearFilter","endYearFilter","setEndYearFilter","countries","setCountries","disasterTypes","setDisasterTypes","useCases","setUseCases","implementers","setImplementers","sdgs","setSdgs","startYears","setStartYears","endYears","setEndYears","length","newDisasterTyes","newSdgs","selectedCountry","setSelectedCountry","selectedDisasterType","setSelectedDisasterType","selectedUserCase","setSelectedUserCase","selectedImplementer","setSelectedImplementer","selectedSdg","setSelectedSdg","selectedStartYear","setSelectedStartYear","selectedEndYear","setSelectedEndYear","filtered","isFiltered","filter","i","includes","style","borderBottomStyle","borderBottomColor","borderBottomWidth","paddingBottom","alignItems","flexWrap","marginTop","marginBottom","marginLeft","marginRight","id","maxWidth","padding","border","onChange","e","target","value","map","item","type","borderColor","borderWidth","borderStyle","backgroundColor","cursor","borderRadius","FilterDrawer","ScrollableDiv","maxHeight","overflowY","overflowX","overflow","scrollBehavior","undefined","TechItem","tech","techKey","hoveredTech","selected","techFilter","setTechFilter","setHoveredTech","hoveredItem","setBackgroundColor","isItemHovered","setIsItemHovered","Utilities","checkItemHasTechFromMultiple","slug","changeBackgroundEnter","changeBackgroundLeave","flex","onMouseEnter","onMouseLeave","onFocus","onBlur","TechList","showTitle","radarData","techFilters","setTech","newTechMap","RadarUtilities","filterBlips","b","techy","foundTech","find","t","textAlign","techItem","className","TechDrawer","MainLayout","minW","AboutOrganization","mt","organizationContent","title","boxSize","objectFit","imageSrc","description","AboutContent","aboutContentList","aboutDigitalTechnologiesRadarContent","aboutDigitalResilienceTeamContent","aboutSDGAiLabContent","aboutConnectingBusinessInitiativeContent","About","mb","centerContent","aboutContentChild","index","QuadrantItemList","quadrant","horizon","setHoveredItem","setSelectedItem","titleKey","quadrantKey","horizonKey","allowToggle","bg","minHeight","Description","my","isTruncated","mx","variant","QuadrantDataLists","selectedQuadrant","headers","setHeaders","horizons","setHorizons","myBlips","setMyBlips","newBlips","newHeaders","getQuadrants","header","push","newHorizons","getHorizons","Fragment","filteredBlipsAndHorizons","filteredBlips","filteredHorizonNames","Set","add","getFilteredBlipsAndHorizons","filteredHorizons","QuadrantDataListItem","capitalize","BackButton","nav","useNavigate","logic","setSelectedQuadrant","aria-label","icon","WaitingForRadar","boxShadow","alignContent","justifyContent","styles","loadingEllipsis","noOfLines","QuadrantView","selectedItem","quadrants","quadrantId","useParams","py","OuterBoxProps","borderBottom","ml","InnerBoxProps","AppConst","getContent","loremIpsum","avgSentencesPerParagraph","avgWordsPerSentence","technologyDescriptions","createSlug","TechDescription","selectedTechs","setSelectedTechs","newSelectedTechs","radarDataTechItem","selectedSlug","get","TechDescriptionOuterBoxProps","selectedTechKey","selectedTech","TechDescriptionInnerBoxProps","text","v4","RadarView","zIndex","flexDirection","top","Radar","Search","NotFound404","NavApp","path","element","AppRadarProvider","radarConf","orders","r","g","opacity","initialOpacity","clumpingOpacity","csvFile","csvData","mapping","Data","Source","SDG","cleanupStringArray","split","Technology","Theme","BlipView","useDisclosure","onOpen","onClose","mr","textTransform","colSpan","px","join","verticalAlign","textJustify","href","isExternal","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25995146.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingEllipsis\":\"WaitingForRadar_loadingEllipsis__2e2Eh\",\"ellipsis\":\"WaitingForRadar_ellipsis__3qLY_\"};","import React from 'react';\nimport { SelectionState } from '@undp_sdg_ai_lab/undp-radar';\nimport { IconButton } from '@chakra-ui/button';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport { useNavigate } from 'react-router';\nimport { ROUTES } from '../../navigation/routes';\n\nenum BackTo {\n  RADAR = 'RADAR',\n  QUADRANT = 'QUADRANT'\n}\n\ninterface Props {\n  to: keyof typeof BackTo;\n}\n\nexport const BackButton: React.FC<Props> = ({ to }) => {\n  const nav = useNavigate();\n  return (\n    <SelectionState>\n      {({\n        selectedQuadrant,\n        logic: { setSelectedQuadrant, setSelectedItem }\n      }): JSX.Element => (\n        <IconButton\n          aria-label=''\n          icon={<FaArrowLeft />}\n          onClick={() => {\n            switch (to) {\n              case 'QUADRANT':\n                setSelectedItem(null);\n                if (selectedQuadrant)\n                  nav(`${ROUTES.QUADRANT}/${selectedQuadrant}`);\n                break;\n              case 'RADAR': // 'RADAR' is the same as default\n              default:\n                setSelectedQuadrant(null);\n                setSelectedItem(null);\n                nav(ROUTES.RADAR);\n                break;\n            }\n          }}\n        >\n          Back\n        </IconButton>\n      )}\n    </SelectionState>\n  );\n};\n","import React from 'react';\nimport { createBreakpoints } from '@chakra-ui/theme-tools';\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  extendTheme,\n  theme,\n  ThemeConfig\n} from '@chakra-ui/react';\n\n// More info: https://chakra-ui.com/docs/getting-started\nexport const ChakraUI: React.FC = ({ children }) => {\n  const colors = {\n    // brand: {\n    //   900: \"#1a365d\",\n    //   800: \"#153e75\",\n    //   700: \"#2a69ac\",\n    // },\n  };\n\n  const breakpoints = createBreakpoints({\n    sm: '30em',\n    md: '48em',\n    lg: '62em',\n    xl: '80em',\n    '2xl': '96em'\n  });\n\n  const config: ThemeConfig = {\n    initialColorMode: 'light',\n    useSystemColorMode: false\n  };\n\n  return (\n    <>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <ChakraProvider\n        theme={extendTheme({ ...theme, colors, breakpoints, config })}\n      >\n        {children}\n      </ChakraProvider>\n    </>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  to: string;\n}\n\nexport const MenuItem: React.FC<Props> = ({ children, to = '/' }) => {\n  return <Link to={to}>{children}</Link>;\n};\n","const RADAR = '/radar';\nconst ABOUT = '/about';\nconst SEARCH = '/search';\n\nconst QUADRANT = `${RADAR}/quadrant`;\nconst QUADRANT_PARAM = `${QUADRANT}/:quadrantId`;\n\nconst BLIP = `${RADAR}/technology-item`;\nconst BLIP_PARAM = `${BLIP}/:techItemId`;\n\nexport const ROUTES = {\n  RADAR,\n  ABOUT,\n  SEARCH,\n  QUADRANT,\n  QUADRANT_PARAM,\n  BLIP,\n  BLIP_PARAM\n};\n","import React from 'react';\nimport { Box, Button, DarkMode, Stack, LightMode } from '@chakra-ui/react';\nimport { FaSearch } from 'react-icons/fa';\nimport { FcAbout } from 'react-icons/fc';\nimport { FiTarget } from 'react-icons/fi';\n\nimport { MenuItem } from './components/MenuItem';\nimport { ROUTES } from '../../navigation/routes';\n\ninterface Props {\n  isOpen: boolean;\n}\n\nexport const MenuLinks: React.FC<Props> = ({ isOpen }) => (\n  <Box\n    display={{ base: isOpen ? 'block' : 'none', md: 'block' }}\n    flexBasis={{ base: '100%', md: 'auto' }}\n    paddingTop={200}\n  >\n    <Stack\n      spacing={8}\n      align='center'\n      justify={['center', 'space-between', 'space-between', 'space-between']}\n      direction={['column', 'column', 'column', 'column']}\n      pt={[4, 4, 0, 0]}\n    >\n      <MenuItem to={ROUTES.RADAR}>\n        <DarkMode>\n          <Button size='sm' rounded='md' colorScheme='none'>\n            <FiTarget color='3a87dd' size='md' />\n          </Button>\n        </DarkMode>\n      </MenuItem>\n\n      <MenuItem to={ROUTES.ABOUT}>\n        <LightMode>\n          <Button size='sm' rounded='md' colorScheme='none'>\n            <FcAbout size='md' />\n          </Button>\n        </LightMode>\n      </MenuItem>\n\n      <MenuItem to={ROUTES.SEARCH}>\n        <Button size='sm' rounded='md' colorScheme='blue'>\n          <FaSearch />\n        </Button>\n      </MenuItem>\n    </Stack>\n  </Box>\n);\n","import React, { useEffect, useState } from 'react';\nimport {\n  chakra,\n  Box,\n  ChakraProps,\n  Text,\n  SkeletonCircle\n} from '@chakra-ui/react';\n\ninterface Props {\n  file?: string | undefined;\n  maxwidthorheight?: number;\n}\n\nexport const Logo: React.FC<ChakraProps & Props> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n\n    // memory leaking cleanup\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n  return (\n    <Box {...props} m='auto'>\n      {props.file ? (\n        <>\n          {loading && (\n            <SkeletonCircle\n              size={(props.maxwidthorheight\n                ? props.maxwidthorheight\n                : 50\n              ).toString()}\n            />\n          )}\n          {!loading && (\n            <chakra.img\n              m='auto'\n              // animation={animation}\n              src={props.file}\n              // ref={ref}\n              maxW={props.maxwidthorheight ? props.maxwidthorheight : 50}\n              maxH={props.maxwidthorheight ? props.maxwidthorheight : 50}\n            />\n          )}\n        </>\n      ) : (\n        <Text fontSize='lg' fontWeight='bold'>\n          <div>replace me</div>\n        </Text>\n      )}\n    </Box>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/UNDP_logo.811464c8.png\";","import { ChakraProps } from '@chakra-ui/react';\nimport React from 'react';\nimport { Logo } from './Logo';\n\n// import logo from \"../../../assets/logo.svg\";\nimport logo from '../../../assets/logos/UNDP_logo.png';\n\nexport const UNLogo: React.FC<ChakraProps> = (props) => (\n  <Logo file={logo} maxwidthorheight={100} {...props} />\n);\n","import React from 'react';\n\nimport { useColorMode } from '@chakra-ui/react';\n\nexport const MenuIcon: React.FC = () => {\n  const { colorMode } = useColorMode();\n  return (\n    <svg\n      width='24px'\n      viewBox='0 0 20 20'\n      xmlns='http://www.w3.org/2000/svg'\n      fill={colorMode === 'light' ? 'black' : 'white'}\n    >\n      <title>Menu</title>\n      <path d='M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z' />\n    </svg>\n  );\n};\n","import React from 'react';\n\nimport { useColorMode } from '@chakra-ui/react';\n\nexport const CloseIcon: React.FC = () => {\n  const { colorMode } = useColorMode();\n  return (\n    <svg width='24' viewBox='0 0 18 18' xmlns='http://www.w3.org/2000/svg'>\n      <title>Close</title>\n      <path\n        fill={colorMode === 'light' ? 'black' : 'white'}\n        d='M9.00023 7.58599L13.9502 2.63599L15.3642 4.04999L10.4142 8.99999L15.3642 13.95L13.9502 15.364L9.00023 10.414L4.05023 15.364L2.63623 13.95L7.58623 8.99999L2.63623 4.04999L4.05023 2.63599L9.00023 7.58599Z'\n      />\n    </svg>\n  );\n};\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { UNLogo } from './components/UNLogo';\nimport { MenuIcon } from './components/MenuIcon';\nimport { CloseIcon } from './components/CloseIcon';\n\ninterface Props {\n  toggle: () => void;\n  isOpen: boolean;\n}\n\nexport const MenuToggle: React.FC<Props> = ({ toggle, isOpen }) => {\n  return (\n    <Box display={{ base: 'block', md: 'none' }} onClick={toggle}>\n      <Box display='flex'>\n        {isOpen ? <CloseIcon /> : <MenuIcon />}\n        <UNLogo pl={5} />\n      </Box>\n    </Box>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/SDG_BLACK_logo.cff21889.png\";","export default __webpack_public_path__ + \"static/media/SDG_WHITE_logo.e32f6cd2.png\";","import React from 'react';\n\nimport { ChakraProps, useColorMode } from '@chakra-ui/react';\n\nimport { Logo } from './Logo';\n\n// import logo from \"../../../assets/logo.svg\";\nimport logoBlack from '../../../assets/logos/SDG_BLACK_logo.png';\nimport logoWhite from '../../../assets/logos/SDG_WHITE_logo.png';\n\nexport const UNDPLogo: React.FC<ChakraProps> = (props) => {\n  const { colorMode } = useColorMode();\n\n  return (\n    <Logo\n      w='65px'\n      // color={[\"white\", \"white\", \"primary.500\", \"primary.500\"]}\n      file={colorMode === 'light' ? logoBlack : logoWhite}\n      maxwidthorheight={65}\n      paddingTop={910}\n      paddingLeft={3}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport { Flex } from '@chakra-ui/react';\n\nexport const NavBarContainer: React.FC = ({ children, ...props }) => {\n  return (\n    <Flex\n      as='nav'\n      align='center'\n      justify='space-between'\n      wrap='wrap'\n      display='block'\n      position='fixed'\n      w='5%'\n      height='100vh'\n      background='whitesmoke'\n      // mb={8}\n      pt={0}\n      pb={0}\n      pr={0}\n      pl={0}\n      // bg={[\"primary.500\", \"primary.500\", \"transparent\", \"transparent\"]}\n      // color={[\"white\", \"white\", \"primary.700\", \"primary.700\"]}\n      {...props}\n    >\n      {children}\n    </Flex>\n  );\n};\n","import { Box } from '@chakra-ui/layout';\nimport React from 'react';\n\nimport { MenuLinks } from './MenuLinks';\nimport { MenuToggle } from './MenuToggle';\nimport { UNLogo } from './components/UNLogo';\nimport { UNDPLogo } from './components/UNDPLogo';\nimport { NavBarContainer } from './NavBarContainer';\n\n// taken from https://github.com/dimitrisraptis96/chakra-ui-navbar/tree/main/src\nexport const AppNavbar: React.FC = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <NavBarContainer>\n      <Box\n        w={75}\n        h={'25%'}\n        background={''}\n        display={'inline-block'}\n        position={'relative'}\n      >\n        <UNLogo p={1} />\n        <UNDPLogo />\n      </Box>\n\n      <MenuToggle toggle={toggle} isOpen={isOpen} />\n      <MenuLinks isOpen={isOpen} />\n\n      <Box\n        w={100}\n        h={''}\n        display={['none', 'none', 'inherit', 'inherit']}\n      ></Box>\n    </NavBarContainer>\n  );\n};\n","import { v4 as uuidv4 } from 'uuid';\n\nimport {\n  BlipType,\n  DisasterTypeKey,\n  SelectableItem,\n  UseCaseKey\n} from '@undp_sdg_ai_lab/undp-radar';\n\nconst getCountries = (\n  rawBlipData: BlipType[],\n  countryKey: string\n): SelectableItem[] => {\n  const newCountries: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((val) => {\n    if (val[countryKey] !== '' && !newCountries.has(val[countryKey]))\n      newCountries.set(val[countryKey], {\n        uuid: uuidv4(),\n        name: val[countryKey]\n      });\n  });\n  return Array.from(newCountries.values());\n};\n\nconst getDisasterTypes = (\n  rawBlipData: BlipType[],\n  disasterTypeKey: DisasterTypeKey\n): SelectableItem[] => {\n  const newDisterTypes: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((val) => {\n    if (\n      val[disasterTypeKey] !== '' &&\n      !newDisterTypes.has(val[disasterTypeKey])\n    )\n      newDisterTypes.set(val[disasterTypeKey], {\n        uuid: uuidv4(),\n        name: val[disasterTypeKey]\n      });\n  });\n  return Array.from(newDisterTypes.values());\n};\n\nconst getUseCases = (\n  rawBlipData: BlipType[],\n  useCaseKey: UseCaseKey\n): SelectableItem[] => {\n  const newUseCases: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((val) => {\n    if (val[useCaseKey] !== '' && !newUseCases.has(val[useCaseKey]))\n      newUseCases.set(val[useCaseKey], {\n        uuid: uuidv4(),\n        name: val[useCaseKey]\n      });\n  });\n  return Array.from(newUseCases.values());\n};\n\nconst getImplementers = (\n  rawBlipData: BlipType[],\n  implementerKey: string\n): SelectableItem[] => {\n  const newImplementers: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((val) => {\n    if (val[implementerKey] !== '' && !newImplementers.has(val[implementerKey]))\n      newImplementers.set(val[implementerKey], {\n        uuid: uuidv4(),\n        name: val[implementerKey]\n      });\n  });\n  return Array.from(newImplementers.values());\n};\n\nconst getSDGs = (rawBlipData: BlipType[], SDGKey: string): SelectableItem[] => {\n  const newSDGs: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((blip) => {\n    // a blip can have multiple SDGs\n    const blipSDGs: string[] = blip[SDGKey];\n    blipSDGs.forEach((sdg) => {\n      if (sdg !== '' && !newSDGs.has(blip[SDGKey])) {\n        newSDGs.set(sdg, { uuid: uuidv4(), name: sdg });\n      }\n    });\n  });\n  return Array.from(newSDGs.values());\n};\n\nconst getStartYears = (\n  rawBlipData: BlipType[],\n  startYearKey: string\n): SelectableItem[] => {\n  const newStartYears: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((val) => {\n    if (val[startYearKey] !== '' && !newStartYears.has(val[startYearKey]))\n      newStartYears.set(val[startYearKey], {\n        uuid: uuidv4(),\n        name: val[startYearKey]\n      });\n  });\n  return Array.from(newStartYears.values());\n};\n\nconst getEndYears = (\n  rawBlipData: BlipType[],\n  endYearKey: string\n): SelectableItem[] => {\n  const newEndYears: Map<string, SelectableItem> = new Map();\n  rawBlipData.forEach((val) => {\n    if (val[endYearKey] !== '' && !newEndYears.has(val[endYearKey]))\n      newEndYears.set(val[endYearKey], {\n        uuid: uuidv4(),\n        name: val[endYearKey]\n      });\n  });\n  return Array.from(newEndYears.values());\n};\n\nexport const FilterUtils = {\n  getCountries,\n  getDisasterTypes,\n  getUseCases,\n  getImplementers,\n  getSDGs,\n  getStartYears,\n  getEndYears\n};\n","export const countryKey = 'Country of Implementation';\nexport const implementerKey = 'Un Host Organisation';\nexport const sdgKey = 'SDG';\nexport const startYearKey = 'Date of Implementation';\nexport const endYearKey = 'Date of Implementation';\n","import React, { ChangeEventHandler, useEffect, useState } from 'react';\nimport {\n  SelectableItem,\n  useDataState,\n  useRadarState\n} from '@undp_sdg_ai_lab/undp-radar';\n\nimport { FilterUtils } from './FilterUtilities';\nimport {\n  countryKey,\n  implementerKey,\n  sdgKey,\n  startYearKey,\n  endYearKey\n} from './FilterConstants';\n\nexport const CustomFilter: React.FC = () => {\n  const {\n    state: { blips, disasterTypeFilter, useCaseFilter },\n    setUseCaseFilter,\n    setDisasterTypeFilter,\n    setFilteredBlips\n  } = useRadarState();\n\n  const {\n    state: {\n      keys: { useCaseKey, disasterTypeKey: disasterKey }\n    }\n  } = useDataState();\n\n  // FILTERS\n  // countries\n  const [countryFilter, setCountryFilter] = useState<string>('all');\n  // implementer\n  const [implementerFilter, setImplementerFilter] = useState<string>('all');\n  // sdg\n  const [sdgFilter, setSdgFilter] = useState<string>('all');\n  // start year\n  const [startYearFilter, setStartYearFilter] = useState<string>('all');\n  // end year\n  const [endYearFilter, setEndYearFilter] = useState<string>('all');\n\n  // ALL OPTIONS\n  // countries\n  const [countries, setCountries] = useState<SelectableItem[]>([]);\n  // disasters\n  const [disasterTypes, setDisasterTypes] = useState<SelectableItem[]>([]);\n  // use cases\n  const [useCases, setUseCases] = useState<SelectableItem[]>([]);\n  // implementers\n  const [implementers, setImplementers] = useState<SelectableItem[]>([]);\n  // sdg\n  const [sdgs, setSdgs] = useState<SelectableItem[]>([]);\n  // start year\n  const [startYears, setStartYears] = useState<SelectableItem[]>([]);\n  // end year\n  const [endYears, setEndYears] = useState<SelectableItem[]>([]);\n\n  // EFFECT on Blips change, to get all options\n  useEffect(() => {\n    if (blips && blips?.length > 0) {\n      // country options\n      const newCountries = FilterUtils.getCountries(blips, countryKey);\n      setCountries(newCountries);\n      // disaster options\n      const newDisasterTyes = FilterUtils.getDisasterTypes(blips, disasterKey);\n      setDisasterTypes(newDisasterTyes);\n      // usecase options\n      const newUseCases = FilterUtils.getUseCases(blips, useCaseKey);\n      setUseCases(newUseCases);\n      // implementer options\n      const newImplementers = FilterUtils.getImplementers(\n        blips,\n        implementerKey\n      );\n      setImplementers(newImplementers);\n      // sdg options\n      const newSdgs = FilterUtils.getSDGs(blips, sdgKey);\n      setSdgs(newSdgs);\n      // start year options\n      const newStartYears = FilterUtils.getStartYears(blips, startYearKey);\n      setStartYears(newStartYears);\n      // end year options\n      const newEndYears = FilterUtils.getEndYears(blips, endYearKey);\n      setEndYears(newEndYears);\n    }\n  }, [blips]);\n\n  // selectedCountry\n  const [selectedCountry, setSelectedCountry] = useState<string>(\n    countryFilter === null ? 'all' : countryFilter\n  );\n\n  // selectedDisasterType\n  const [selectedDisasterType, setSelectedDisasterType] = useState<string>(\n    disasterTypeFilter === null ? 'all' : disasterTypeFilter\n  );\n\n  // selectedUserCase\n  const [selectedUserCase, setSelectedUserCase] = useState<string>(\n    useCaseFilter === null ? 'all' : useCaseFilter\n  );\n\n  // selectedImplementer\n  const [selectedImplementer, setSelectedImplementer] = useState<string>(\n    implementerFilter === null ? 'all' : sdgFilter\n  );\n\n  // selectedSGD\n  const [selectedSdg, setSelectedSdg] = useState<string>(\n    sdgFilter === null ? 'all' : sdgFilter\n  );\n\n  // selectedStartYear\n  const [selectedStartYear, setSelectedStartYear] = useState<string>(\n    startYearFilter === null ? 'all' : startYearFilter\n  );\n\n  // selectedEndYear\n  const [selectedEndYear, setSelectedEndYear] = useState<string>(\n    endYearFilter === null ? 'all' : endYearFilter\n  );\n\n  /**\n   * This is our filtering logic\n   */\n  useEffect(() => {\n    let filtered = blips; // we start with all Blips\n    let isFiltered = false;\n\n    // filter countries\n    if (countryFilter !== 'all') {\n      isFiltered = true;\n      filtered = filtered.filter((i) => i[countryKey] === countryFilter);\n    }\n\n    // filter disaster types\n    if (disasterTypeFilter !== 'all') {\n      isFiltered = true;\n      filtered = filtered.filter((i) => i[disasterKey] === disasterTypeFilter);\n    }\n\n    // filter use cases\n    if (useCaseFilter !== 'all') {\n      isFiltered = true;\n      filtered = filtered.filter((i) => i[useCaseKey] === useCaseFilter);\n    }\n\n    // filter implementers\n    if (implementerFilter !== 'all') {\n      isFiltered = true;\n      filtered = filtered.filter(\n        (i) => i[implementerKey] === implementerFilter\n      );\n    }\n\n    // filter SDGs\n    if (sdgFilter !== 'all') {\n      isFiltered = true;\n      // a blip can have multiple SDGs\n      filtered = filtered.filter((i) => i[sdgKey].includes(sdgFilter));\n    }\n\n    // filter start years\n    if (startYearFilter !== 'all') {\n      isFiltered = true;\n      filtered = filtered.filter((i) => i[startYearKey] === startYearFilter);\n    }\n\n    // filter end years\n    if (endYearFilter !== 'all') {\n      isFiltered = true;\n      filtered = filtered.filter((i) => i[endYearKey] === endYearFilter);\n    }\n\n    // set filter\n    setFilteredBlips(isFiltered, filtered);\n  }, [\n    useCaseKey,\n    disasterKey,\n    countryFilter,\n    disasterTypeFilter,\n    useCaseFilter,\n    implementerFilter,\n    sdgFilter,\n    startYearFilter,\n    endYearFilter\n  ]); // don't forget to add filters to dep array here\n\n  // on country filter change\n  const onCountryChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedCountry(e.target.value);\n  // on disaster type filter change\n  const onDisasterTypeChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedDisasterType(e.target.value);\n  // on use case filter change\n  const onUseCaseChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedUserCase(e.target.value);\n  // on implementer filter change\n  const onImplementerChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedImplementer(e.target.value);\n  // on SDG filter change\n  const onSdgChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedSdg(e.target.value);\n  // on start year filter change\n  const onStartYearChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedStartYear(e.target.value);\n  // on end year filter change\n  const onEndYearChange: ChangeEventHandler<HTMLSelectElement> = (e) =>\n    setSelectedEndYear(e.target.value);\n\n  const onFilterHandler = (): void => {\n    // selected?\n    setCountryFilter(selectedCountry);\n    setDisasterTypeFilter(selectedDisasterType);\n    setUseCaseFilter(selectedUserCase);\n    setImplementerFilter(selectedImplementer);\n    setSdgFilter(selectedSdg);\n    setStartYearFilter(selectedStartYear);\n    setEndYearFilter(selectedEndYear);\n  };\n\n  return (\n    <div\n      style={{\n        borderBottomStyle: 'solid',\n        borderBottomColor: 'lightgrey',\n        borderBottomWidth: 1,\n        paddingBottom: 5,\n        display: 'flex',\n        // flexWrap: 'wrap',\n        alignItems: 'center'\n      }}\n    >\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          <select\n            id='Select1'\n            style={{\n              maxWidth: '105px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onCountryChange}\n            value={selectedCountry}\n          >\n            <option value='all'>Country</option>\n            {countries.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          <select\n            id='Select2'\n            style={{\n              maxWidth: '140px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onDisasterTypeChange}\n            value={selectedDisasterType}\n          >\n            <option value='all'>Disaster Type</option>\n            {disasterTypes.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          <select\n            id='Select3'\n            style={{\n              maxWidth: '115px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onUseCaseChange}\n            value={selectedUserCase}\n          >\n            <option value='all'>Use Case</option>\n            {useCases.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          <select\n            id='Select4'\n            style={{\n              maxWidth: '140px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onImplementerChange}\n            value={selectedImplementer}\n          >\n            <option value='all'>UN Host</option>\n            {implementers.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          <select\n            id='Select5'\n            style={{\n              maxWidth: '100px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onSdgChange}\n            value={selectedSdg}\n          >\n            <option value='all'>SDG</option>\n            {sdgs.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          {/* <span style={{ marginRight: '10px' }}>Start Year</span> */}\n          <select\n            id='Select6'\n            style={{\n              maxWidth: '110px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onStartYearChange}\n            value={selectedStartYear}\n          >\n            <option value='all'>Start Year</option>\n            {startYears.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div\n          style={{\n            marginTop: 0,\n            marginBottom: 10,\n            marginLeft: 0,\n            marginRight: 20\n          }}\n        >\n          {/* <span style={{ marginRight: '10px' }}>End Year</span> */}\n          <select\n            id='Select7'\n            style={{\n              maxWidth: '110px',\n              padding: '10px',\n              border: '1px solid lightgrey'\n            }}\n            onChange={onEndYearChange}\n            value={selectedEndYear}\n          >\n            <option value='all'>End Year</option>\n            {endYears.map((item) => (\n              <option key={item.uuid} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div>\n        <button\n          type='button'\n          style={{\n            borderColor: 'lightgrey',\n            borderWidth: 1,\n            borderStyle: 'solid',\n            padding: '10px 20px',\n            backgroundColor: 'white',\n            cursor: 'pointer',\n            borderRadius: 5,\n            color: '#0a58ca',\n            marginBottom: 10\n          }}\n          onClick={onFilterHandler}\n        >\n          Filter\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { CustomFilter } from './filter/CustomFilter';\n\nexport const FilterDrawer: React.FC = () => <CustomFilter />;\n","import React from 'react';\n\ninterface Props {\n  maxHeight?: number;\n  overflowY?: boolean;\n  overflowX?: boolean;\n}\nexport const ScrollableDiv: React.FC<Props> = ({\n  children,\n  maxHeight = 80,\n  overflowY = true,\n  overflowX = false\n}) => (\n  <div\n    style={{\n      maxHeight,\n      overflow: 'hidden',\n      scrollBehavior: 'smooth',\n      overflowY: overflowY ? 'auto' : undefined,\n      overflowX: overflowX ? 'auto' : undefined,\n      display: 'flex',\n      flexWrap: 'wrap'\n    }}\n  >\n    {children}\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport {\n  BlipType,\n  TechItemType,\n  TechKey,\n  Utilities\n} from '@undp_sdg_ai_lab/undp-radar';\nimport './TechItem.scss';\n\nexport const TechItem: React.FC<{\n  tech: TechItemType;\n  techKey: TechKey;\n  hoveredTech: string | null;\n  selected: boolean;\n  techFilter: string[];\n  setTechFilter: (techSlug: string[]) => void;\n  setHoveredTech: (techSlug: string | null) => void;\n  hoveredItem: BlipType | null;\n}> = ({\n  tech,\n  techKey,\n  hoveredTech,\n  selected,\n  techFilter,\n  setTechFilter,\n  setHoveredTech,\n  hoveredItem\n}) => {\n  const selectTech = (): void => setTechFilter([...techFilter, tech.slug]);\n\n  const [backgroundColor, setBackgroundColor] = useState<string | undefined>(\n    undefined\n  );\n  const [isItemHovered, setIsItemHovered] = useState(false);\n\n  useEffect(() => {\n    setBackgroundColor(\n      selected ||\n        (hoveredItem &&\n          Utilities.checkItemHasTechFromMultiple(\n            hoveredItem,\n            [tech.slug],\n            techKey\n          ))\n        ? tech.color\n        : undefined\n    );\n    setIsItemHovered(\n      tech.slug === hoveredTech ||\n        Utilities.checkItemHasTechFromMultiple(\n          hoveredItem,\n          [tech.slug],\n          techKey\n        )\n    );\n  }, [tech, selected, hoveredItem, hoveredTech]);\n\n  const changeBackgroundEnter = (): void => {\n    setHoveredTech(tech.slug);\n    setBackgroundColor(selected ? tech.color : tech.color);\n  };\n  const changeBackgroundLeave = (): void => {\n    setHoveredTech(null);\n    setBackgroundColor(selected ? tech.color : undefined);\n  };\n\n  return (\n    <button\n      style={{\n        border: 'none',\n        background: 'none',\n        display: 'flex',\n        flex: 'auto',\n        alignItems: 'center',\n        padding: 1,\n        // paddingLeft: 10,\n        marginRight: 12,\n        marginBottom: 6,\n        cursor: 'pointer'\n        // width: '100%'\n      }}\n      type='button'\n      onClick={selectTech}\n      onMouseEnter={changeBackgroundEnter}\n      onMouseLeave={changeBackgroundLeave}\n      onFocus={changeBackgroundEnter}\n      onBlur={changeBackgroundLeave}\n    >\n      <div style={{ /*paddingLeft: 20,*/ width: '100%' }}>\n        <div\n          style={{\n            backgroundColor:\n              isItemHovered || selected ? tech.color : backgroundColor,\n            color: isItemHovered || selected ? 'white' : tech.color,\n            padding: 4,\n            border: 1,\n            borderColor: 'lightgrey',\n            borderStyle: 'solid',\n            borderRadius: 5,\n            fontSize: 14,\n            fontWeight: 500\n          }}\n        >\n          {tech.type}\n        </div>\n      </div>\n    </button>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ScrollableDiv } from './components/ScrollableDiv';\nimport {\n  useDataState,\n  useRadarState,\n  TechItemType,\n  RadarUtilities\n} from '@undp_sdg_ai_lab/undp-radar';\nimport { TechItem } from './components/TechItem';\nimport './TechList.scss';\n\nexport const TechList: React.FC<{ showTitle?: boolean }> = ({\n  showTitle = true\n}) => {\n  const {\n    state: {\n      blips,\n      radarData,\n      techFilters,\n      hoveredTech,\n      hoveredItem,\n      useCaseFilter,\n      disasterTypeFilter\n    },\n    setTechFilter,\n    setHoveredTech\n  } = useRadarState();\n\n  const {\n    state: { keys }\n  } = useDataState();\n\n  const [tech, setTech] = useState<TechItemType[]>([]);\n\n  const resetTech = (): void => {\n    setTechFilter([]);\n  };\n\n  useEffect(() => {\n    if (blips.length > 0) {\n      const newTechMap: Map<string, TechItemType> = new Map();\n      RadarUtilities.filterBlips(\n        blips,\n        keys,\n        useCaseFilter,\n        disasterTypeFilter\n      ).forEach((b) => {\n        (b[keys.techKey] as string[]).forEach((techy) => {\n          const foundTech = radarData.tech.find((t) => t.type === techy);\n\n          if (foundTech && !newTechMap.has(foundTech.slug)) {\n            // could be added\n            if (\n              b[keys.useCaseKey] === useCaseFilter ||\n              useCaseFilter === 'all'\n            ) {\n              (b[keys.techKey] as string[]).forEach((t) => {\n                if (t === foundTech.type) newTechMap.set(t, foundTech);\n              });\n            }\n            if (\n              b[keys.useCaseKey] === disasterTypeFilter ||\n              disasterTypeFilter === 'all'\n            ) {\n              (b[keys.techKey] as string[]).forEach((t) => {\n                if (t === foundTech.type) newTechMap.set(t, foundTech);\n              });\n            }\n          }\n        });\n      });\n      setTech(Array.from(newTechMap.values()));\n    }\n  }, [blips, radarData, useCaseFilter, disasterTypeFilter]);\n\n  const selected = (techItem: TechItemType): boolean => {\n    if (techFilters && techFilters.length > 0) {\n      return !!techFilters.find((tech) => tech === techItem.slug);\n    }\n    return false;\n  };\n\n  return (\n    <div\n      style={{\n        paddingTop: 15,\n        display: 'flex',\n        alignItems: 'center'\n        // flexWrap: 'wrap'\n      }}\n    >\n      <div style={{ textAlign: 'end' }}>\n        <ScrollableDiv>\n          {tech.map((t) => {\n            const toggleTechFilter = (): void => {\n              if (techFilters && techFilters.length > 0) {\n                const item = techFilters.find((tech) => tech === t.slug);\n                if (item) {\n                  setTechFilter([\n                    ...techFilters.filter((tech) => tech !== item)\n                  ]);\n                  return;\n                }\n              }\n              setTechFilter([...techFilters, t.slug]);\n            };\n            return (\n              <TechItem\n                key={t.uuid}\n                hoveredTech={hoveredTech}\n                setHoveredTech={setHoveredTech}\n                hoveredItem={hoveredItem}\n                tech={t}\n                techKey={keys.techKey}\n                selected={selected(t)}\n                techFilter={techFilters}\n                setTechFilter={toggleTechFilter}\n              />\n            );\n          })}\n        </ScrollableDiv>\n      </div>\n      <button\n        onClick={resetTech}\n        type='button'\n        className={'resetTechFilterButton'}\n      >\n        Reset\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TechList } from './tech/TechList';\n\nexport const TechDrawer: React.FC = () => <TechList />;\n","import React from 'react';\nimport { Container } from '@chakra-ui/react';\n\nexport const MainLayout: React.FC = ({ children }) => (\n  <Container p={0} minW='90vw'>\n    {children}\n  </Container>\n);\n","import { Box, Flex, Text, Image, Spacer } from '@chakra-ui/react';\nimport { AboutContentChild } from './AboutContent';\n\ninterface AboutOrganizationProps {\n  organizationContent: AboutContentChild;\n}\n\nconst AboutOrganization: React.FunctionComponent<AboutOrganizationProps> = (\n  props\n) => {\n  return (\n    <div>\n      <Box borderWidth='5px' borderRadius='lg' mt='2' p='10'>\n        <Flex>\n          <Text as='b' fontSize='2xl'>\n            {props.organizationContent.title}\n          </Text>\n          <Spacer />\n          <Image\n            boxSize={16}\n            objectFit='contain'\n            src={props.organizationContent.imageSrc}\n          />\n        </Flex>\n        <br />\n        <Text fontSize='sm'>{props.organizationContent.description}</Text>\n      </Box>\n    </div>\n  );\n};\n\nexport default AboutOrganization;\n","export interface AboutContentChild {\n  title: string;\n  description: string;\n  imageSrc: string;\n}\n\nclass AboutContent {\n  static readonly aboutDigitalTechnologiesRadarContent: AboutContentChild = {\n    title: 'Digital Technologies Radar',\n    description:\n      'SDG AI Lab in partnership with UNDP DRT and CBi has developed an online tool – a DRM Digital Technologies Radar, which allows for the systematic tracking and understanding of frontier technologies as they are developed. This would categorize technological solutions according to their technology type, disaster/crisis type and maturity level. Moreover, it is expected that the tool developed would encourage knowledge and experience-sharing among development stakeholders on the use of frontier technologies in disaster and conflict contexts. The DRM Digital Technologies Radar aims to highlight the potential of technological solutions in disaster contexts to those working in the fields of risk reduction, response and recovery. It supports development stakeholders to navigate the variety of existing and emerging technologies and their possible use cases.',\n    imageSrc: 'https://cdn-icons-png.flaticon.com/512/1299/1299558.png'\n  } as const;\n\n  static readonly aboutDigitalResilienceTeamContent: AboutContentChild = {\n    title:\n      'UNDP Disaster Risk Reduction and Recovery for Building Resilience Team (DRT)',\n    description:\n      'The Crisis Bureau guides UNDP’s corporate crisis-related strategies and vision for crisis prevention, response and recovery. The Bureau has the responsibility for support to prevention, crisis response, resilience and recovery work under the auspices of UNDP’s Strategic Plan. The Disaster Risk Reduction and Recovery for Building Resilience Team (DRT) is situated within the Crisis Bureau of UNDP providing integrated policy and program support on disaster risk reduction and recovery in the context of UNDP’s broader approach to crisis prevention and increased resilience. The Team specifically fosters the mainstreaming of risk reduction as a key element in sustainable development and recovery at national, sub-national and sectoral level with a focus on integrated approaches with climate change adaptation.',\n    imageSrc:\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/UNDP_logo.svg/1011px-UNDP_logo.svg.png'\n  } as const;\n\n  static readonly aboutSDGAiLabContent: AboutContentChild = {\n    title: 'SDG AI Lab',\n    description:\n      'The SDG AI Lab is a joint initiative of UNDP BPPS teams, and it is hosted under UNDP IICPSD. The Lab has a mission to harness the potential of frontier technologies such as Artificial Intelligence (AI), Machine Learning (ML), Geographic Information Systems (GIS) for sustainable development. SDG AI Lab provides research, development, and advisory services in the areas of frontier technologies and sustainable development. As well, the Lab supports UNDP’s internal capacity strengthening efforts for the increasing demand for digital solutions. To bridge the talent gap in the use of frontier technologies in development contexts, the Lab mobilizes a community of volunteer data scientists, connecting UNDP teams and highly skilled data scientists to address development challenges with digital solutions.',\n    imageSrc: 'https://avatars.githubusercontent.com/u/64203335?s=200&v=4'\n  } as const;\n\n  static readonly aboutConnectingBusinessInitiativeContent: AboutContentChild =\n    {\n      title: 'Connecting Business initiative',\n      description:\n        'Connecting Business initiative (CBi) engages the private sector strategically before, during and after emergencies, increasing the scale and effectiveness of the response and recovery in a coordinated manner. To do so the Connecting Business initiative strengthens and supports 17 private sector networks around the world. These networks reached a combined membership of 4,100 companies and they have access to more than 40,000 micro-, small- and medium-sized enterprises (MSMEs). CBi also actively disseminates innovative methods to private-sector networks and other partners to inform what is possible through recent breakthroughs also in technologies.',\n      imageSrc: 'https://sdgailab.org/assets/img/logos/Picture5.png'\n    } as const;\n}\n\nexport const aboutContentList: ReadonlyArray<AboutContentChild> = [\n  AboutContent.aboutDigitalTechnologiesRadarContent,\n  AboutContent.aboutDigitalResilienceTeamContent,\n  AboutContent.aboutSDGAiLabContent,\n  AboutContent.aboutConnectingBusinessInitiativeContent\n];\n","import React from 'react';\nimport { Container, VStack } from '@chakra-ui/react';\nimport AboutOrganization from './AboutOrganization';\nimport { aboutContentList } from './AboutContent';\n\nexport const About: React.VFC = () => {\n  return (\n    <Container mt={5} mb={90} centerContent maxW='container.xl'>\n      <VStack>\n        {aboutContentList.map((aboutContentChild, index) => (\n          <div className='about-content' key={index}>\n            <AboutOrganization organizationContent={aboutContentChild} />\n          </div>\n        ))}\n      </VStack>\n    </Container>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  maxHeight?: number;\n  overflowY?: boolean;\n  overflowX?: boolean;\n}\nexport const ScrollableDiv: React.FC<Props> = ({\n  children,\n  maxHeight = 400,\n  overflowY = true,\n  overflowX = false\n}) => (\n  <div\n    style={{\n      maxHeight,\n      overflow: 'hidden',\n      scrollBehavior: 'smooth',\n      overflowY: overflowY ? 'auto' : undefined,\n      overflowX: overflowX ? 'auto' : undefined\n    }}\n  >\n    {children}\n  </div>\n);\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  Utilities,\n  RadarUtilities,\n  useRadarState,\n  useDataState,\n  BlipType,\n  RadarOptionsType\n} from '@undp_sdg_ai_lab/undp-radar';\nimport { ScrollableDiv } from '../components/ScrollableDiv';\n\nimport './DataLists.scss';\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Badge,\n  Box,\n  Button,\n  Flex,\n  Text\n} from '@chakra-ui/react';\n\ntype ListMatrixItem = { uuid: string; name: string };\n\ninterface Props {\n  radarData: RadarOptionsType;\n  quadrant: ListMatrixItem;\n  horizon?: ListMatrixItem | null;\n  blips: BlipType[];\n  hoveredItem: BlipType | null;\n  hoveredTech: string | null;\n  setHoveredItem: (payload: BlipType | null) => void;\n  setSelectedItem: (item: BlipType) => void;\n}\n\nconst QuadrantItemList: React.FC<Props> = ({\n  radarData,\n  quadrant,\n  horizon = null,\n  blips,\n  hoveredItem,\n  hoveredTech,\n  setHoveredItem,\n  setSelectedItem\n}) => {\n  const {\n    state: {\n      keys: { titleKey, quadrantKey, horizonKey }\n    }\n  } = useDataState();\n  return (\n    <ScrollableDiv maxHeight={400}>\n      <Accordion allowToggle>\n        {blips.map((blip) => {\n          const onMouseEnter = () => setHoveredItem(blip);\n          const onMouseLeave = () => setHoveredItem(null);\n          if (\n            blip[quadrantKey] === quadrant.name &&\n            (horizon === null || blip[horizonKey] === horizon.name)\n          )\n            return (\n              <AccordionItem\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n              >\n                <h5>\n                  <AccordionButton>\n                    <Box as='h6' flex='1' textAlign='left'>\n                      {blip[titleKey]}\n                    </Box>\n                    <AccordionIcon />\n                  </AccordionButton>\n\n                  <AccordionPanel pb={4}>\n                    <Box bg={'#EDF2F7'}>\n                      <Flex direction={'column'} minHeight={'200px'} p='5'>\n                        <Box>\n                          <Text mb='2'>Description</Text>\n                          <Text fontWeight={'400'} fontSize={'md'}>\n                            {blip.Description}\n                          </Text>\n                        </Box>\n                        <Flex flexWrap={'wrap'} my='5'>\n                          <Badge\n                            isTruncated\n                            my='1'\n                            mx='1'\n                            variant='subtle'\n                            colorScheme='orange'\n                          >\n                            🌋{' ' + blip['Disaster Cycle']}\n                          </Badge>\n                          <Badge\n                            isTruncated\n                            my='1'\n                            mx='1'\n                            variant='subtle'\n                            colorScheme='green'\n                          >\n                            🏠{' ' + blip['Un Host Organisation']}\n                          </Badge>\n                          <Badge\n                            isTruncated\n                            my='1'\n                            mx='1'\n                            variant='subtle'\n                            colorScheme='purple'\n                          >\n                            📍{' ' + blip['Country of Implementation']}\n                          </Badge>\n                          <Badge\n                            isTruncated\n                            my='1'\n                            mx='1'\n                            variant='subtle'\n                            colorScheme='cyan'\n                          >\n                            🎯{' ' + blip['SDG']}\n                          </Badge>\n                        </Flex>\n                        <Button\n                          onClick={() => setSelectedItem(blip)}\n                          colorScheme='blue'\n                          borderRadius={'0'}\n                        >\n                          More\n                        </Button>\n                      </Flex>\n                    </Box>\n                  </AccordionPanel>\n                </h5>\n              </AccordionItem>\n            );\n          return null;\n        })}\n      </Accordion>\n    </ScrollableDiv>\n  );\n};\n\nexport const QuadrantDataLists: React.FC = () => {\n  const {\n    state: { keys }\n  } = useDataState();\n\n  const {\n    state: {\n      blips,\n      radarData,\n      useCaseFilter,\n      disasterTypeFilter,\n      techFilters,\n      hoveredItem,\n      hoveredTech,\n      selectedQuadrant\n    },\n    setHoveredItem,\n    setSelectedItem\n  } = useRadarState();\n\n  const [headers, setHeaders] = useState<ListMatrixItem[]>([]);\n  const [horizons, setHorizons] = useState<ListMatrixItem[]>([]);\n\n  const [myBlips, setMyBlips] = useState<BlipType[]>([]);\n\n  useEffect(() => {\n    let newBlips = RadarUtilities.filterBlips(\n      blips,\n      keys,\n      useCaseFilter,\n      disasterTypeFilter\n    );\n    if (selectedQuadrant) {\n      newBlips = newBlips.filter(\n        (blip) => blip[keys.quadrantKey] === selectedQuadrant\n      );\n    }\n    setMyBlips(newBlips);\n  }, [blips, selectedQuadrant, useCaseFilter, disasterTypeFilter]);\n\n  useEffect(() => {\n    if (blips && blips.length > 0) {\n      const newHeaders: ListMatrixItem[] = [];\n      RadarUtilities.getQuadrants(blips, keys.quadrantKey).forEach((header) => {\n        if (\n          !selectedQuadrant ||\n          (selectedQuadrant && selectedQuadrant === header)\n        ) {\n          newHeaders.push({ uuid: uuidv4(), name: header });\n        }\n      });\n      const newHorizons: ListMatrixItem[] = [];\n      RadarUtilities.getHorizons(blips, keys.horizonKey).forEach((horizon) =>\n        newHorizons.push({ uuid: uuidv4(), name: horizon })\n      );\n      setHeaders(newHeaders);\n      setHorizons(newHorizons);\n    }\n  }, [blips, selectedQuadrant]);\n\n  const setSelectedItemLogic = (item: BlipType) => {\n    setSelectedItem(item);\n    setHoveredItem(null);\n  };\n\n  interface FilteredBlipsAndHorizons {\n    filteredBlips: BlipType[];\n    filteredHorizonNames: Set<String>;\n  }\n\n  const getFilteredBlipsAndHorizons = (\n    header: ListMatrixItem\n  ): FilteredBlipsAndHorizons => {\n    const filteredBlipsAndHorizons: FilteredBlipsAndHorizons =\n      {} as FilteredBlipsAndHorizons;\n    filteredBlipsAndHorizons.filteredBlips = new Array<BlipType>();\n    filteredBlipsAndHorizons.filteredHorizonNames = new Set<String>();\n\n    myBlips.forEach((blip) => {\n      if (\n        Utilities.checkItemHasTechFromMultiple(\n          blip,\n          techFilters,\n          keys.techKey\n        ) &&\n        blip[keys.quadrantKey] === header.name\n      ) {\n        filteredBlipsAndHorizons.filteredBlips.push(blip);\n        filteredBlipsAndHorizons.filteredHorizonNames.add(\n          blip[keys.horizonKey]\n        );\n      }\n    });\n\n    return filteredBlipsAndHorizons;\n  };\n\n  return (\n    <section>\n      {techFilters.length > 0 && (\n        <React.Fragment>\n          {headers.map((header) => {\n            const filteredBlipsAndHorizons: FilteredBlipsAndHorizons =\n              getFilteredBlipsAndHorizons(header);\n\n            if (filteredBlipsAndHorizons.filteredHorizonNames.size === 0) {\n              return (\n                <Text color='gray.500' as='i'>\n                  No technologies to display for selected technology types...\n                </Text>\n              );\n            } else {\n              const filteredHorizons: ListMatrixItem[] = horizons.filter(\n                (horizon) =>\n                  filteredBlipsAndHorizons.filteredHorizonNames.has(\n                    horizon.name\n                  )\n              );\n\n              return (\n                <div key={header.uuid}>\n                  <Accordion allowToggle>\n                    {filteredHorizons.map((horizon, index) => {\n                      return (\n                        <div key={index}>\n                          {/*TODO: Usage of uuidv4() causes bug where accordian glitches in height*/}\n                          <AccordionItem>\n                            <QuadrantDataListItem\n                              radarData={radarData}\n                              hoveredTech={hoveredTech}\n                              setHoveredItem={setHoveredItem}\n                              hoveredItem={hoveredItem}\n                              setSelectedItem={setSelectedItem}\n                              blips={filteredBlipsAndHorizons.filteredBlips}\n                              headers={headers}\n                              horizon={horizon}\n                            />\n                          </AccordionItem>\n                        </div>\n                      );\n                    })}\n                  </Accordion>\n                </div>\n              );\n            }\n          })}\n        </React.Fragment>\n      )}\n\n      {techFilters.length === 0 && (\n        <React.Fragment>\n          <Accordion allowToggle>\n            {horizons.map((horizon, index) => {\n              return (\n                <div key={index}>\n                  {/*TODO: Usage of uuidv4() causes bug where accordian glitches in height*/}\n                  <AccordionItem>\n                    <QuadrantDataListItem\n                      radarData={radarData}\n                      hoveredTech={hoveredTech}\n                      setHoveredItem={setHoveredItem}\n                      hoveredItem={hoveredItem}\n                      setSelectedItem={setSelectedItem}\n                      blips={blips}\n                      headers={headers}\n                      horizon={horizon}\n                    />\n                  </AccordionItem>\n                </div>\n              );\n            })}\n          </Accordion>\n        </React.Fragment>\n      )}\n    </section>\n  );\n};\n\ninterface QuadrantDataListItemProps {\n  radarData: RadarOptionsType;\n  horizon: ListMatrixItem;\n  blips: BlipType[];\n  hoveredItem: BlipType | null;\n  hoveredTech: string | null;\n  setHoveredItem: (payload: BlipType | null) => void;\n  setSelectedItem: (item: BlipType) => void;\n  headers: ListMatrixItem[];\n}\n\nconst QuadrantDataListItem: React.FC<QuadrantDataListItemProps> = ({\n  radarData,\n  horizon,\n  blips,\n  hoveredItem,\n  hoveredTech,\n  setHoveredItem,\n  setSelectedItem,\n  headers\n}) => {\n  return (\n    <div>\n      {headers.map((header, index) => (\n        <div key={index}>\n          {/*TODO: Usage of uuidv4() causes bug where accordian glitches in height*/}\n          <h5>\n            <AccordionButton>\n              <Box\n                key={`${header.uuid}-${horizon.uuid}`}\n                flex='1'\n                textAlign='left'\n                as='h5'\n              >\n                {Utilities.capitalize(horizon.name)}\n              </Box>\n              <AccordionIcon />\n            </AccordionButton>\n          </h5>\n          <AccordionPanel>\n            <QuadrantItemList\n              radarData={radarData}\n              hoveredTech={hoveredTech}\n              setHoveredItem={setHoveredItem}\n              hoveredItem={hoveredItem}\n              setSelectedItem={setSelectedItem}\n              blips={blips}\n              quadrant={header}\n              horizon={horizon}\n            />\n          </AccordionPanel>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Box, SkeletonCircle, SkeletonText, Text } from '@chakra-ui/react';\n\nimport styles from './WaitingForRadar.module.scss';\n\ninterface Props {\n  size?: string;\n}\n\nexport const WaitingForRadar: React.FC<Props> = ({ size = '30vw' }) => (\n  <Box\n    padding='6'\n    boxShadow='lg'\n    bg='white'\n    alignContent='center'\n    justifyContent='center'\n  >\n    <SkeletonCircle size={size} m='auto' />\n    <Text display='none' m='auto' className={styles.loadingEllipsis}>\n      Loading\n    </Text>\n    <SkeletonText mt='4' noOfLines={4} spacing='4' />\n  </Box>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Box, Flex, useColorMode, Text, BoxProps } from '@chakra-ui/react';\nimport { useParams } from 'react-router';\nimport {\n  BlipType,\n  Filter,\n  QuadrantRadar,\n  TechList,\n  useRadarState\n} from '@undp_sdg_ai_lab/undp-radar';\n\nimport { QuadrantDataLists } from '../../components/lists/quadrant/DataLists';\n\nimport { BackButton, WaitingForRadar } from '../../radar/components';\nimport { useNavigate } from 'react-router-dom';\nimport { ROUTES } from '../../navigation/routes';\n\nexport const QuadrantView: React.FC = () => {\n  const nav = useNavigate();\n  const { colorMode } = useColorMode();\n  const [loading, setLoading] = useState(true);\n  const {\n    state: {\n      selectedItem,\n      selectedQuadrant,\n      radarData: { quadrants }\n    },\n    setSelectedQuadrant\n  } = useRadarState();\n\n  const { quadrantId } = useParams();\n\n  useEffect(() => {\n    const goToBlip = (blip: BlipType) => nav(`${ROUTES.BLIP}/${blip.id}`);\n    if (selectedItem) {\n      // goToBlip(selectedItem);\n    } else if (quadrantId) {\n      if (quadrants && quadrants.length > 0 && quadrants.includes(quadrantId)) {\n        // we must show Quadrant view\n        setSelectedQuadrant(quadrantId);\n        setLoading(false);\n      }\n    }\n  }, [selectedItem, selectedQuadrant, quadrants, quadrantId]);\n\n  return (\n    <Flex\n      py={0}\n      flexBasis={['auto', '45%']}\n      w='full'\n      justifyContent='space-between'\n      bg={\n        colorMode === 'light' ? 'rgba(250,250,250,1)' : 'rgba(250,250,250,.3)'\n      }\n    >\n      <BackButton to='RADAR' />\n      <Box>\n        <TechList showTitle={false} />\n        <Filter />\n      </Box>\n      <Box flex={1}>\n        {loading && <WaitingForRadar />}\n        {!loading && (\n          <>\n            {/* TODO: change the undefined type to null in the lib */}\n            <QuadrantRadar selectedQuadrant={selectedQuadrant || undefined} />\n          </>\n        )}\n      </Box>\n      <Box flex={'0.75'}>\n        <Box {...OuterBoxProps}>\n          <Text\n            width={'fit-content'}\n            color={'blue.500'}\n            borderBottom={'3px solid'}\n            my={5}\n            ml={5}\n            as='h5'\n          >\n            Stages\n          </Text>\n          <Box {...InnerBoxProps}>\n            <QuadrantDataLists />\n          </Box>\n        </Box>\n      </Box>\n    </Flex>\n  );\n};\n\nconst OuterBoxProps: BoxProps = {\n  borderColor: 'gray.200',\n  borderWidth: '2px',\n  borderRadius: 'md',\n  m: '5',\n  my: '10',\n  p: '1',\n  maxWidth: '500px'\n};\n\nconst InnerBoxProps: BoxProps = {\n  borderColor: 'gray.200',\n  borderWidth: '2px',\n  borderRadius: 'md',\n  m: '1',\n  p: '2'\n};\n","// Lorem Ipsum from https://fatihtelis.github.io/react-lorem-ipsum/\nimport { loremIpsum } from 'react-lorem-ipsum';\nimport { Utilities } from '@undp_sdg_ai_lab/undp-radar';\n\nexport type TechDescriptionType = string[];\n\nexport class AppConst {\n  private static getContent = () =>\n    loremIpsum({\n      p: 2,\n      avgSentencesPerParagraph: 10,\n      avgWordsPerSentence: 8\n    });\n\n  static readonly technologyDescriptions: Map<string, TechDescriptionType> =\n    new Map([\n      [\n        Utilities.createSlug('Machine Learning'),\n        [\n          'Machine Learning (ML) as the computerized approach of Artificial Narrow Intelligence and will thus treat it as a sub-field of AI. Note that ML further encompasses the more traditional probabilistic modelling approaches as well as the rapidly developing field of Deep Learning that involves the use of Neural Networks.',\n          'Within ML, we can further consider two different applications – supervised ML and unsupervised ML. The first uses labelled data (examples of what we want the machine to recognize) to map the input to outputs. The second uses unstructured data, for instance the text of a whole document or a set of images without descriptions to find underlying patterns with only minimal human supervision.',\n          'An example use case of Machine Learning is predicting the likelihood that a disastrous event will occur.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Artificial Intelligence'),\n        [\n          'An early definition for AI comes from Bellman in 1978 and defines AI as \"The automation of activities that we associate with human thinking, activities such as decision making, problem-solving, learning.\" There are countless approaches to define AI, some more technical, some more elaborative, some more practical and some even philosophical. ',\n          'The unprecedented rise of AI can mostly be attributed to two factors: i) the availability, size, and amount of a multitude of data sources describing our lives and the world around us and ii) the increase in computational power.',\n          'What we are currently experiencing is a world that runs on Artificial Narrow Intelligence: Machines that are specialized in one area. This may be recommending new products to customers, playing a game of chess, recognize objects in images, Google-translating text for us or predict the likelihood of a disastrous event to occur.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Geographical Information Systems'),\n        [\n          'The cornerstones of Geographical Information Systems(GIS) were laid down with the advent of modern computer systems in the 1980s that enabled the processing of larger amounts of spatial information. Together with the digitalization of spatial data during that period, GIS made similar leaps forward like other types of information technology.',\n          'GIS provide the necessary software tools to store, distribute, analyse, and create spatial information of any kind. GIS is a true cross-cutting discipline involving computer science, geodesy, geomatics, geography, statistics and more recently ML.',\n          'This multi-disciplinary nature becomes clearer looking at the typical lifecycle of a GIS project. Data and information gathering (Information Management) often depend largely on remote sensing systems such as satellites, plane, or drone imagery. Storage and processing can be approached either with traditional storage solutions or, more recently, with cloud computing solutions. Geospatial Analysis and Predictive Analytics draw heavily from data science methods and are more and more influenced by modern algorithms for data analysis like ML.',\n          'An example use case of Geographical Information Systems is processing satellite images to assess losses and damages after a disastrous event. '\n        ]\n      ],\n      [\n        Utilities.createSlug('Computer Vision'),\n        [\n          'Computer vision is an interdisciplinary scientific field that deals with how computers can gain high-level understanding from digital images or videos. he image data can take many forms, such as video sequences, views from multiple cameras, multi-dimensional data from a 3D scanner, or medical scanning device. The technological discipline of computer vision seeks to apply its theories and models to the construction of computer vision systems.',\n          'An example use case of Computer Vision is measuring the damage after a disaster scenario by using collected images'\n        ]\n      ],\n      [\n        Utilities.createSlug('Natural Language Processing'),\n        [\n          'Natural language processing (NLP) is a subfield of linguistics, computer science, and artificial intelligence concerned with the interactions between computers and human language, in particular how to program computers to process and analyze large amounts of natural language data. The goal is a computer capable of \"understanding\" the contents of documents, including the contextual nuances of the language within them. The technology can then accurately extract information and insights contained in the documents as well as categorize and organize the documents themselves.',\n          'An example use case of NLP is analyzing the existing articles, project document etc. to gather meaningful information in disaster management'\n        ]\n      ],\n      [\n        Utilities.createSlug('Remote Sensing'),\n        [\n          'Remote Sensing, throughout its different definitions, follows one central concept: Gathering data from a distance. More specifically, Remote Sensing is concerned with collecting information from distant objects without being in contact with them, usually by measuring propagated signals such as electromagnetic radiation allowing us to obtain a global perspective and monitor the current and future state of the world.',\n          'Common examples are sonar sensors and satellite imagery that are used to map out the ocean’s ground, changes in temperature of the oceans, tracking of clouds or monitoring seismic activities. More contemporary use cases include observing the growth of a city and changes in farmland or forests over time.',\n          'An example use case of Remote Sensing is measuring seismic or volcanic activity and if certain thresholds are reached activate early warning systems.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Blockchain'),\n        [\n          'Blockchain promises a system that will make intermediates between transactions obsolete and shifts the power to an individual by replacing powerful institutions with collaboration and clever code. A blockchain is a form of distributed ledger technology (DLT) that is speculated to have the disruptive power to change the way our societies interact and trade.',\n          'The mathematical complexity behind the systems is highly technical and it is best explained by outlining the core principles of why the technology was developed: Blockchain provides the technical tools that allow different parties and entities to interact and exchange certain values without involving and relying on a trusted third party such as a financial institution.',\n          'Moreover, transactions that flow in the blockchain allow full process transparency and provide integrity-protected data storage systems.42 It is important to note that all kinds of different information from personal data to intellectual property can be stored on a blockchain.',\n          'An example use case of Blockchain is  monitoring resource allocation and spending habits after a disastrous event without touching privacy issues. '\n        ]\n      ],\n      [\n        Utilities.createSlug('Social Media'),\n        [\n          'Social Media is a relatively recent phenomenon but has significantly changed the way we interact with and distribute information in society. Currently, it is estimated that 3.6 billion people are using at least one sort of social media platform. This colossal number alone underlines the importance of technology. Commonly, social media is associated with various digital platforms such as Facebook, Twitter, YouTube, WhatsApp, Telegram, or Instagram, but can be more generally defined as technologies that emphasize contents and interactions created by individual users.',\n          'An example use case of Social Media is gathering information about damaged areas and disastrous sub-events through analysing social media posts. '\n        ]\n      ],\n      [\n        Utilities.createSlug('Internet of Things'),\n        [\n          'As it is the case for many other emerging technologies, the Internet of Things (IoT), sometimes also referred to as the Internet of Objects, lacks a clear definition that depicts what it encompasses. Commonly, it describes the networked interconnection of physical, often everyday objects through the wireless connection. These objects are equipped with sensors that absorb and collect information about the world around them, including them in our interactions and further increasing the already omnipresent nature of the Internet.81 Whereas some definitions emphasize the individual objects involved and other definitions focus on the Internet and connectivity aspect of IoT, the central concept remains unchanged: By turning physical information into digital data, IoT promises to make everyday devices, everyday processing and everyday communication smarter and more informative.',\n          'IoT also comes with a high degree of interconnection with other technologies. Sensors are used for collecting and measuring information, cloud architectures for processing and storing data and AI applications for automatization, analytics and adding the “smart” aspect.',\n          'The benefits that IoT promises, in the humanitarian context, are summed up by the International Telecommunication Union (ITU) as i) improving situational awareness, ii) better means to measure and monitor objects and processes and iii) expand communication to a multilateral connected “everything-to-everything” system. ',\n          'An example use case of Internet of Things(IoT) is connecting the data collected from multiple sensors in real-time.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Drones'),\n        [\n          'Drones - also commonly referred to as unmanned aerial vehicles (UAVs) - are remotely controlled or programmed vehicles that can operate and fly without a pilot. In the past, drones have started to gain attention mostly through their use in armed conflicts but have now entered our everyday lives as a readily available product for end-users and are even under consideration by Amazon to bring a paradigm-shift in the online-delivery market',\n          'Drones come in various sizes, operating power, capacities, and prices. The use case and sizes range from the size of a hand and the ability to fly a few meters over the ground to take videos and pictures for personal purposes up to the 24m long Ravn X to launch satellites.',\n          'An example use case of Drones is flying over a damaged area to take high-resolution pictures for assessment. '\n        ]\n      ],\n      [\n        Utilities.createSlug('Cyber Physical Systems'),\n        [\n          'Even though CPS was first introduced in 2006 the foundations were laid much earlier with the emerge of cybernetics and the study of human and computer interaction. CPS have a physical and a cyber component and the focus is put on the interaction of those two. An example is autonomous cars in which the physical and cyber components are in a constant feedback loop without human intervention but rather monitored and controlled by algorithms. This is the key to understand CPS – we have systems that are controlled by algorithms and not humans.',\n          'It is further important to not only understand the distinct elements of the system but their interaction. Regarding the other technologies in the focus of this research, IoT and CPS are sometimes mistaken for each other and indeed share a similar vision. There is no common agreement yet on how and to what degree the two are different. For the sake of simplicity, we propose to see CPS as a mechanism that is monitored and controlled by algorithms and IoT as a network of connected devices.',\n          'An example use case of Cyber Physical Systems is interconnected systems that are monitored and controlled by algorithms. Examples may be smart cities/houses that proactively respond (for instance by turning off potentially dangerous electric outlets) to certain parameters indicating a possible disaster.  '\n        ]\n      ],\n      [\n        Utilities.createSlug('Augmented Reality/Virtual Reality'),\n        [\n          'AR is based on a combination of hard- and software. A camera is used to ingest real-world data which is then combined with virtual information into one perception. VR is a simulation process in which computer graphics are employed to build a realistic, virtual world.',\n          'AR and VR are not new technologies as early work began in the 1960s. However, only recently AR and VR technologies became more available. For example, AR and VR are used to simulate different levels of manufacturing processes before they are carried out to produce the final product.35 Moreover, AR is effectively used to simulate training. This is especially useful in training people on otherwise costly or dangerous tasks. One example is practising work on high-voltage electric power installations.',\n          'An example use case of Augmented Reality/Virtual Reality is simulating different environments to prepare people for real disasters.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Crowdsourcing'),\n        [\n          'Crowdsourcing behaves as a distinct enabler for various digital solutions. Most definitions of crowdsourcing put a strong emphasis on the Internet as the underlying medium. Following this, we can think of crowdsourcing as leveraging the collective intelligence of multiple actors to serve a common goal whereas the processes are usually arranged in online platforms. 56  While there are also commercial applications such as Amazon Mechanical Turk, it is important to note that crowdsourcing commonly refers to the pursuit of an organisational goal that is concerned with the social good. ',\n          'An example use case of Crowdsourcing is engaging people to manually label image data – tag houses, infrastructures, landscapes. '\n        ]\n      ],\n      [\n        Utilities.createSlug('Data Mining'),\n        [\n          'Data mining is a process of extracting and discovering patterns in large data sets involving methods at the intersection of machine learning, statistics, and database systems.',\n          'Data mining is an interdisciplinary subfield of computer science and statistics with an overall goal of extracting information (with intelligent methods) from a data set and transform the information into a comprehensible structure for further use.',\n          'Data mining is the analysis step of the \"knowledge discovery in databases\" process. Aside from the raw analysis step, it also involves database and data management aspects, data pre-processing, model and inference considerations, interestingness metrics, complexity considerations, post-processing of discovered structures, visualization, and online updating.',\n          'An example use case of Data Mining is detecting terrorist threats through analysis of computer networks, social networks, fusion of sensor data for nuclear threat detection, face recognition at crowded settings, etc. Data Mining and Machine Learning could be combined with static data  to monitor changing conditions and their impact on static features of the community.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Data Extraction'),\n        [\n          'Data extraction is the act or process of retrieving data out of (usually unstructured or poorly structured) data sources for further data processing or data storage (data migration).',\n          'Typical unstructured data sources include web pages, emails, documents, PDFs, scanned text, mainframe reports, spool files, classifieds, etc. which is further used for sales or marketing leads. Extracting data from these unstructured sources has grown into a considerable technical challenge where as historically data extraction has had to deal with changes in physical hardware formats, the majority of current data extraction deals with extracting data from these unstructured data sources, and from different software formats. This growing process of data extraction from the web is referred to as \"Web data extraction\" or \"Web scraping\".',\n          'An example use case of Data Extraction is  extracting hazard-related information from social media, including volume, unstructured data sources, signal-to-noise ratio even the geographical tags'\n        ]\n      ],\n      [\n        Utilities.createSlug('Data Analysis'),\n        [\n          \"Data analysis is a process of inspecting, cleansing, transforming, and modelling data with the goal of discovering useful information, informing conclusions, and supporting decision-making. Data analysis has multiple facets and approaches, encompassing diverse techniques under a variety of names, and is used in different business, science, and social science domains. In today's business world, data analysis plays a role in making decisions more scientific and helping businesses operate more effectively.\"\n        ]\n      ],\n      [\n        Utilities.createSlug('Big Data'),\n        [\n          'Big data is a field that treats ways to analyze, systematically extract information from, or otherwise deal with data sets that are too large or complex to be dealt with by traditional data-processing application software.',\n          'Big data was originally associated with three key concepts: volume, variety, and velocity. The analysis of big data presents challenges in sampling, and thus previously allowing for only observations and sampling. Therefore, big data often includes data with sizes that exceed the capacity of traditional software to process within an acceptable time and value.',\n          'Current usage of the term big data tends to refer to the use of predictive analytics, user behavior analytics, or certain other advanced data analytics methods that extract value from big data, and seldom to a particular size of data set.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Data Collection and Analysis'),\n        ['Will be merged in to Data Analysis, data extraction and analysis']\n      ],\n      [\n        Utilities.createSlug('Mobile App'),\n        [\n          'A mobile application or app is a computer program or software application designed to run on a mobile device such as a phone, tablet, or watch. Mobile applications often stand in contrast to desktop applications which are designed to run on desktop computers, and web applications which run in mobile web browsers rather than directly on the mobile device.',\n          'An example use case of Mobile App is developing a mobile application that matches requests and donations during a disaster scenario'\n        ]\n      ],\n      [\n        Utilities.createSlug('Application Programming Interface'),\n        [\n          'An application programming interface (API) is a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Cloud Computing'),\n        [\n          'Cloud technology, and cloud computing as a sub-field, allows access and use of physical services such as servers, storage, and graphical processor over the internet (the “cloud”). This decentralized or distributed approach also allows users to only pay for what they use without adding costs for the local resources. Both the increase in computing power and the better accessibility make cloud computing a powerful enabler of other technologies. For instance, it helps to achieve some of the greatest advancements in the field of AI and enabled individual researchers and developers to compete with large corporations and establish their solutions. ',\n          'Both the increase in computing power and the better accessibility make cloud computing a powerful enabler of other technologies. For instance, it helps to achieve some of the greatest advancements in the field of AI and enabled individual researchers and developers to compete with large corporations and establish their solutions. ',\n          'An example use case of Crowdsourcing is processing and access large amounts of data in real-time independent of possessing the physical infrastructure.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Voice Recognition'),\n        [\n          'Speech recognition/Voice Recognition is an interdisciplinary subfield of computer science and computational linguistics that develops methodologies and technologies that enable the recognition and translation of spoken language into text by computers with the main benefit of searchability.',\n          'An example use case of Voice Recognition is detecting the disaster victim during or after a disaster scenario'\n        ]\n      ],\n      [\n        Utilities.createSlug('Web Mapping'),\n        [\n          'A Web mapping or an online mapping is the process of using the maps delivered by geographic information systems (GIS) on the Internet.',\n          'A web map or an online map is both served and consumed, thus web mapping is more than just web cartography, it is a service by which consumers may choose what the map will show. Web GIS emphasizes geodata processing aspects more involved with design aspects such as data acquisition and server software architecture such as data storage and algorithms, than it does the end-user reports themselves.'\n        ]\n      ],\n      [Utilities.createSlug('Image Recognition'), ['Under the compute vision']],\n      [\n        Utilities.createSlug('Deep Learning'),\n        [\n          'Deep learning (DL) is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Within DL, we can further consider two different applications – supervised DL and unsupervised DL. The first uses labelled data (examples of what we want the machine to recognize) to map the input to outputs. The second uses unstructured data, for instance the text of a whole document or a set of images without descriptions to find underlying patterns with only minimal human supervision.',\n          'An example use case of Deep Learning is predicting the likelihood that a disastrous event will occur.'\n        ]\n      ],\n      [\n        Utilities.createSlug('Chatbot'),\n        [\n          'A chatbot or chatterbot is a software application used to conduct an on-line chat conversation via text or text-to-speech, in lieu of providing direct contact with a live human agent.',\n          'Chatbots are used in dialog systems for various purposes including customer service, request routing, or information gathering. While some chatbot applications use extensive word-classification processes, natural language processors, and sophisticated AI, others simply scan for general keywords and generate responses using common phrases obtained from an associated library or database.',\n          'Most chatbots are accessed on-line via website popups or through virtual assistants. A chatbot can be used a virtual informative assistant in or after a disaster scenario'\n        ]\n      ]\n    ]);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useRadarState, TechKey } from '@undp_sdg_ai_lab/undp-radar';\nimport { Box, BoxProps, Text } from '@chakra-ui/react';\nimport { v4 } from 'uuid';\n\nimport { AppConst, TechDescriptionType } from '../../components/constants/app';\nimport { FaFontAwesomeLogoFull } from 'react-icons/fa';\n\nexport const TechDescription: React.FC = () => {\n  const {\n    state: { radarData, techFilters }\n  } = useRadarState();\n\n  const [selectedTechs, setSelectedTechs] =\n    useState<Map<TechKey, TechDescriptionType>>();\n\n  useEffect(() => {\n    const newSelectedTechs: Map<TechKey, TechDescriptionType> = new Map();\n    if (techFilters && techFilters.length > 0) {\n      radarData.tech.forEach((radarDataTechItem) => {\n        if (techFilters.includes(radarDataTechItem.slug)) {\n          const selectedSlug = AppConst.technologyDescriptions.get(\n            radarDataTechItem.slug\n          );\n          if (selectedSlug)\n            newSelectedTechs.set(radarDataTechItem.type, selectedSlug);\n        }\n      });\n    }\n    setSelectedTechs(newSelectedTechs);\n  }, [radarData, techFilters]);\n\n  return (\n    <React.Fragment>\n      {selectedTechs && techFilters && techFilters.length > 0 && (\n        <div style={{ paddingTop: 75 }}>\n          <Box {...TechDescriptionOuterBoxProps}>\n            <Text\n              width={'fit-content'}\n              color={'blue.500'}\n              borderBottom={'3px solid'}\n              my={5}\n              ml={10}\n              as='h5'\n            >\n              Technologies\n            </Text>\n\n            {Array.from(selectedTechs.keys()).map((selectedTechKey) => {\n              const selectedTech = selectedTechs.get(selectedTechKey);\n              return (\n                <div key={v4()}>\n                  {selectedTech && (\n                    <Box {...TechDescriptionInnerBoxProps}>\n                      <Text\n                        as='h4'\n                        style={{\n                          textAlign: 'left',\n                          fontWeight: 600,\n                          fontSize: 20\n                        }}\n                      >\n                        {selectedTechKey}\n                      </Text>\n\n                      {selectedTech.map((text) => (\n                        <Text key={v4()} pt={5} style={{ textAlign: 'left' }}>\n                          {text}\n                        </Text>\n                      ))}\n                    </Box>\n                  )}\n                </div>\n              );\n            })}\n          </Box>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst TechDescriptionOuterBoxProps: BoxProps = {\n  borderColor: 'gray.200',\n  borderWidth: '2px',\n  borderRadius: 'md',\n  m: '10',\n  p: '1',\n  maxHeight: '750px',\n  overflow: 'scroll'\n};\n\nconst TechDescriptionInnerBoxProps: BoxProps = {\n  borderColor: 'gray.200',\n  borderWidth: '2px',\n  borderRadius: 'md',\n  m: '1',\n  p: '10'\n};\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Flex, Box, Heading } from '@chakra-ui/react';\n\nimport { Radar as UNDPRadar, useRadarState } from '@undp_sdg_ai_lab/undp-radar';\n\nimport { WaitingForRadar } from '../../radar/components';\nimport { TechDrawer, FilterDrawer } from '../../components';\nimport { TechDescription } from '../../radar/tech/TechDescription';\n\nexport const RadarView: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n\n  const {\n    state: { blips }\n  } = useRadarState();\n\n  useEffect(() => {\n    // TODO: this could be driven by some Library state, specifying 'it is ready for display'\n    if (blips.length > 0) setLoading(false);\n  }, [blips]);\n\n  return (\n    <Grid p={0} pl={1} alignItems={'flex-start'}>\n      <Box\n        style={{\n          position: 'fixed',\n          width: '100%',\n          // height: '18%',\n          zIndex: '1',\n          display: 'inline-block',\n          flexDirection: 'column',\n          backgroundColor: 'whitesmoke',\n          border: '1px solid lightgray'\n        }}\n      >\n        <FilterDrawer />\n        <TechDrawer />\n      </Box>\n      <Flex\n        py={0}\n        position='relative'\n        top='18%'\n        display='flex'\n        flexBasis={['auto', '45%']}\n        w='100%'\n        justifyContent='space-between'\n        direction={{ base: 'column', xl: 'row' }}\n      >\n        <Box flex={1}>\n          <Heading fontSize={30} textAlign='center' p={5} paddingTop={75}>\n            Technology Radar\n          </Heading>\n          {loading && <WaitingForRadar size='620px' />}\n          {!loading && <UNDPRadar />}\n        </Box>\n        <Box flex={'0.75'}>\n          <TechDescription />\n        </Box>\n        <Box>{/* <DataLists /> */}</Box>\n      </Flex>\n    </Grid>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  // BlipType,\n  useRadarState\n} from '@undp_sdg_ai_lab/undp-radar';\n\nimport { ROUTES } from '../navigation/routes';\nimport { RadarView } from './views';\n\nexport const Radar: React.FC = () => {\n  const nav = useNavigate();\n  const {\n    state: { selectedItem, selectedQuadrant },\n    setSelectedItem,\n    setSelectedQuadrant\n  } = useRadarState();\n\n  useEffect(() => {\n    // return () => {\n    //   logic.setSelectedItem(null);\n    //   logic.setSelectedQuadrant(null);\n    // };\n  }, [setSelectedItem, setSelectedQuadrant]);\n\n  useEffect(() => {\n    const goToQuadrant = (quadrant: string) =>\n      nav(`${ROUTES.QUADRANT}/${quadrant}`);\n    // const goToBlip = (blip: BlipType) => nav(`${ROUTES.BLIP}/${blip.id}`);\n    if (selectedItem) {\n      // go to Blip view\n      // goToBlip(selectedItem);\n    } else if (!selectedItem && selectedQuadrant) {\n      // go to quadrant view\n      goToQuadrant(selectedQuadrant);\n    } else {\n      // !selectedItem && !selectedQuadrant\n      // Pass through so we can see the radar\n    }\n  }, [selectedItem, selectedQuadrant, nav]);\n\n  return <RadarView />;\n};\n","import React from 'react';\nimport { Heading } from '@chakra-ui/react';\n\nexport const Search: React.FC = () => <Heading as='h1'>Search</Heading>;\n","import React from 'react';\n\nexport const NotFound404: React.FC = () => <>NotFound404</>;\n","import React from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\n\nimport { AppNavbar } from '../components';\nimport { MainLayout } from '../ui/MainLayout';\nimport { About } from '../pages/about/About';\nimport { NotFound404, Radar, Search } from '../pages';\nimport { ROUTES } from './routes';\nimport { QuadrantView } from '../pages/views';\n\nexport const NavApp = () => (\n  <>\n    <AppNavbar />\n    <MainLayout>\n      <Routes>\n        <Route path={ROUTES.RADAR} element={<Radar />} />\n        <Route path={ROUTES.ABOUT} element={<About />} />\n        <Route path={ROUTES.SEARCH} element={<Search />} />\n\n        <Route path={ROUTES.QUADRANT_PARAM} element={<QuadrantView />} />\n        {/* https://gist.github.com/mjackson/b5748add2795ce7448a366ae8f8ae3bb#not-server-rendering -> should be server redirect */}\n        <Route path='/' element={<Radar />} />\n        <Route path='*' element={<NotFound404 />} />\n      </Routes>\n    </MainLayout>\n  </>\n);\n","export default __webpack_public_path__ + \"static/media/technology_radar_dataset_updated_v3.583075de.csv\";","import React from 'react';\nimport {\n  AddCSV,\n  DataProvider,\n  RadarDataGenerator,\n  RadarProvider,\n  SetData,\n  Utilities,\n  ColorsParamType,\n  KeysObject,\n  MappingType,\n  OrdersParamType,\n  RawBlipType\n} from '@undp_sdg_ai_lab/undp-radar';\nimport '@undp_sdg_ai_lab/undp-radar/dist/index.css';\n\nimport csvData from '../assets/csv/technology_radar_dataset_updated_v3.csv';\n\nexport const AppRadarProvider: React.FC = ({ children }) => {\n  const mapping: MappingType<RawBlipType> = (item: { [key: string]: string }) =>\n    ({\n      'Country of Implementation': item['Country of Implementation'],\n      Data: item.Data,\n      'Date of Implementation': item['Date of Implementation'],\n      Description: item.Description,\n      'Disaster Cycle': item['Disaster Cycle'],\n      'Ideas/Concepts/Examples': item['Ideas/Concepts/Examples'],\n      Source: item.Source,\n      'Status/Maturity': item['Status/Maturity'],\n      'Supporting Partners': item['Supporting Partners'],\n      'Un Host Organisation': item['Un Host Organisation'],\n      'Use Case': item['Use Case'],\n      SDG: Utilities.cleanupStringArray(item.SDG.split(',')),\n      Technology: Utilities.cleanupStringArray(item.Technology.split(',')),\n      'Disaster Type': item['Disaster Type'],\n      Theme: item['Theme']\n    } as unknown as RawBlipType);\n\n  const keys: KeysObject = {\n    techKey: 'Technology',\n    titleKey: 'Ideas/Concepts/Examples',\n    horizonKey: 'Status/Maturity',\n    quadrantKey: 'Disaster Cycle',\n    useCaseKey: 'Use Case',\n    disasterTypeKey: 'Disaster Type'\n  };\n\n  const orders: OrdersParamType = {\n    quadrants: ['Response', 'Recovery', 'Mitigation', 'Preparedness'],\n    horizons: ['Production', 'Prototype', 'Validation', 'Idea']\n  };\n\n  const colors: ColorsParamType = {\n    quadrants: {\n      // colors: null,\n      // colors from https://www.colorhexa.com/color-names\n      colors: [\n        { r: 235, g: 76, b: 66, opacity: 1 }, // Carmine Pink\n        { r: 228, g: 208, b: 10, opacity: 1 }, // Citrine\n        { r: 155, g: 221, b: 255, opacity: 1 }, // Columbia blue\n        { r: 0, g: 204, b: 153, opacity: 1 } // Carabean green\n      ],\n      initialOpacity: 0.7, // [OPTIONAL default=0.7] opacity from the inner horizon\n      clumpingOpacity: 1.1 // [OPTIONAL default=1.0] compresses the opacity so it becomes much smoother\n    }\n  };\n\n  return (\n    <RadarProvider>\n      <DataProvider>\n        <SetData\n          radarConf={{ title: '' }}\n          keys={keys}\n          orders={orders}\n          colors={colors}\n        />\n        <RadarDataGenerator />\n        <AddCSV csvFile={csvData} mapping={mapping} />\n        {children}\n      </DataProvider>\n    </RadarProvider>\n  );\n};\n","import { FC } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalCloseButton,\n  useDisclosure,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Td,\n  Stack,\n  Badge,\n  Link\n} from '@chakra-ui/react';\nimport { useEffect } from 'react';\nimport { useRadarState } from '@undp_sdg_ai_lab/undp-radar';\n\nexport const BlipView: FC = () => {\n  const {\n    state: { selectedItem },\n    setSelectedItem\n  } = useRadarState();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    selectedItem != null && onOpen();\n  }, [selectedItem]);\n\n  return (\n    <>\n      {selectedItem && (\n        <Modal\n          isOpen={isOpen}\n          onClose={() => {\n            onClose();\n            setSelectedItem(null);\n          }}\n          size='xl'\n          scrollBehavior='inside'\n        >\n          <ModalOverlay />\n          <ModalContent maxW={['28rem', '32rem', '36rem', '56rem']}>\n            <ModalHeader\n              pb={0}\n              mr={6}\n              style={{\n                justifyContent: 'center',\n                textAlign: 'center',\n                textTransform: 'capitalize'\n              }}\n            >\n              {selectedItem['Ideas/Concepts/Examples']}\n            </ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <Table variant='unstyled'>\n                <Thead>\n                  <Tr>\n                    <Td colSpan={2}>\n                      <Stack\n                        direction='row'\n                        style={{\n                          justifyContent: 'center'\n                        }}\n                      >\n                        <Badge\n                          px={2}\n                          py={1}\n                          borderRadius='md'\n                          bg='purple.50'\n                          textTransform='capitalize'\n                        >\n                          📍 {selectedItem['Country of Implementation']}\n                        </Badge>\n                        <Badge\n                          px={2}\n                          py={1}\n                          borderRadius='md'\n                          bg='green.50'\n                          textTransform='capitalize'\n                        >\n                          🎯 {selectedItem['SDG']?.join(', ')}\n                        </Badge>\n                        <Badge\n                          px={2}\n                          py={1}\n                          borderRadius='md'\n                          bg='black'\n                          color='white'\n                          textTransform='capitalize'\n                        >\n                          🏠 {selectedItem['Status/Maturity']}\n                        </Badge>\n                        <Badge\n                          px={2}\n                          py={1}\n                          borderRadius='md'\n                          bg='#2B6CB0'\n                          color='#fff'\n                          textTransform='capitalize'\n                        >\n                          🌋 {selectedItem['Disaster Cycle']}\n                        </Badge>\n                      </Stack>\n                    </Td>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Description</Td>\n                    <Td\n                      style={{\n                        textAlign: 'justify',\n                        textJustify: 'inter-word'\n                      }}\n                    >\n                      {selectedItem['Description']}\n                    </Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Technology</Td>\n                    <Td>{selectedItem['Technology']?.join(', ')}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Disaster Type</Td>\n                    <Td>{selectedItem['Disaster Type']}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Use Case</Td>\n                    <Td>{selectedItem['Use Case']}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>\n                      UN Host Organization\n                    </Td>\n                    <Td>{selectedItem['Un Host Organisation']}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Partner</Td>\n                    <Td>{selectedItem['Supporting Partners']}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Data</Td>\n                    <Td>{selectedItem['Data']}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Theme</Td>\n                    <Td>{selectedItem['Theme']}</Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Source</Td>\n                    <Td>\n                      <Link\n                        href={`${selectedItem['Source']}`}\n                        isExternal\n                        color='blue.600'\n                      >\n                        Click Here\n                      </Link>\n                    </Td>\n                  </Tr>\n                  <Tr>\n                    <Td style={{ verticalAlign: 'top' }}>Publication Date</Td>\n                    <Td>{selectedItem['Date of Implementation']}</Td>\n                  </Tr>\n                </Tbody>\n              </Table>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </ModalContent>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { ChakraUI } from './ui/ChakraUI';\nimport { NavApp } from './navigation/AppNav';\nimport { AppRadarProvider } from './radar/RadarProvider';\nimport './App.css';\nimport { BlipView } from './components/views/blip/BlipView';\n\nexport const App: React.FC = () => {\n  return (\n    <AppRadarProvider>\n      <ChakraUI>\n        <BrowserRouter>\n          <NavApp />\n          <BlipView />\n        </BrowserRouter>\n      </ChakraUI>\n    </AppRadarProvider>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}